# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

stages:
  - stage: Build
    jobs:
      - job: Build_Job
        pool:
         name: Default
         demands: vm
        steps:
        - task: CopyFiles@2
          displayName: Copy Files
          inputs:
            Contents: '**'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
        - task: PublishBuildArtifacts@1
          displayName: Publish Build Artifacts
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'
  - stage: Deploy
    jobs:
      - job: Deploy_Job
        pool:
         name: Default
         demands: vm
        steps:
        - task: DownloadBuildArtifacts@1
          displayName: Download Build Artifacts
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'drop'
            downloadPath: '$(System.ArtifactsDirectory)'
        - task: TerraformInstaller@0
          displayName: Terraform Installer
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV3@3
          displayName: Terraform Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'azure-connection'
            backendAzureRmResourceGroupName: 'RG1'
            backendAzureRmStorageAccountName: 'tfstatestrg'
            backendAzureRmContainerName: 'tfstatecontainer'
            backendAzureRmKey: 'diskassignment.tfstate'
        - task: TerraformTaskV3@3
          displayName: Terraform Plan
          inputs:
            provider: 'azurerm'
            command: 'plan'
            commandOptions: '-var-file=dev.tfvars'
            environmentServiceNameAzureRM: 'azure-connection'
        - task: TerraformTaskV3@3
          displayName: Terraform Apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            commandOptions: '-var-file=dev.tfvars'
            environmentServiceNameAzureRM: 'azure-connection'
